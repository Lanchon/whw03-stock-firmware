#!/bin/sh

#------------------------------------------------------------------
# Â© 2016 Belkin International, Inc. and/or its affiliates. All rights reserved.
#------------------------------------------------------------------

source /etc/init.d/service_registration_functions.sh

##################################################################
# Name of this service
# --------------------
# You MUST set this to a globally unique string
##################################################################

# Enter service name below
SERVICE_NAME="node-mode"


##################################################################
# Name of the default handler
# ---------------------------
# Name of the handler to invoke upon default events [start|stop|restart]
# If the value is set to NULL, then no default events will be installed
#
# It is your responsibility to ensure that the default handler code
# exists.
#
# Note
#  When the handler is called, the 1st parameter ($1) will be the event name
#  and the 2nd parameter ($2) will be the event value (or NULL if no value) when the event occurred
#  and subsequent parameters if any are defined as extra parameters as described below
##################################################################

SERVICE_DEFAULT_HANDLER="/etc/init.d/service_${SERVICE_NAME}.sh"

##################################################################
# Custom Events
# -------------
# If the service should receive events other than start stop restart, then
# declare them. If there are no custom events then set to NULL
#
# The format of each line of a custom event string is:
# name_of_event | path/filename_of_handler | activation_flags or NULL | tuple_flags or NULL | extra parameters
#
# Each line must be separated from the next with a ';'
# The last line does not need a separator
#
# Example of a custom event string containing several events
#
# SERVICE_CUSTOM_EVENTS="\
#              foo|$SERVICE_DEFAULT_HANDLER|NULL|NULL|\$wan_proto @ipv4_wan_ipaddr; \
#              bar|/etc/init.d/barhandler.sh|$ACTION_FLAG_NOT_THREADSAFE; \
#              fubar|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT \
#             "
# (see lego_overlay/proprietary/init/init.d/service_registration_functions.sh for
#  an explanation of the format of each event)
##################################################################

# EXAMPLE: on lan and wan network restart
# SERVICE_CUSTOM_EVENTS="\
#                         wan-started|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
#                         lan-started|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT \
#                       "


SERVICE_CUSTOM_EVENTS="\
                        autochannel-status|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        backhaul::intf|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        backhaul::l3_perf|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        backhaul::parent_ip|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        backhaul::status_data|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        backhaul::status|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        backhaul::status_resend|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        backhaul::status_resend_all|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        plc::link_status_changed|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        cloud::alert_user_unconfigured_node|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        devinfo|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        fwup_master_request|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        fwup_slave_status|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        icc_internet_state|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        ipv4_wan_ipaddr|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_NORMAL; \
                        lan-status|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        wan-status|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        link_status_changed|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        lldp::root_address|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_NORMAL; \
                        lldp::device-delete|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        ETH::link_status_changed|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        WIFI::link_status_changed|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        mdnsd-status|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        mqttsub::bhconfig|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        omsg::location|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_NORMAL; \
                        setup::send-presetup-start|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        setup::send-presetup-stop|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        soft_sku_changing|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        soft_sku_changed|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        slave_offline|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        smart_connect::configure_wired_setup-start|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        smart_connect::setup_status|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        smart_connect_status|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        slave_link_status_changed|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        slave_eth_link_status_changed|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        slave_shutdown|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        slave_wifi_link_status_changed|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        system-status|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        subscriber::connected|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_NORMAL; \
                        thrulay::last_thrulay|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_NORMAL; \
			node-mode::check|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        wifi_config_changed|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        wifi_smart_connect_setup-run|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        wifi_smart_connect_setup-stop|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        wifi-status|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        wifi_channel_refreshed|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        wlan::refresh-subdev|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        wlan::user-req-refresh-subdev|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        WPS::pin-cancel|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        WPS::pin-start|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        wps_process|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        wps_process_remote|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        WPS::success|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        router_status|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        smart_connect::setup_ip_changed|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        wlan::status|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT; \
                        wlan::refresh_serving_channels|$SERVICE_DEFAULT_HANDLER|NULL|$TUPLE_FLAG_EVENT;
                      "

#######################################################################
#             NOTHING MORE TO DO
# In general there is no need to change anything below
#######################################################################

# ------------------------------------------------------------------------------------
# function do_stop
# ------------------------------------------------------------------------------------
do_stop() {
   sm_unregister $SERVICE_NAME
}

# ------------------------------------------------------------------------------------
# function do_start
# ------------------------------------------------------------------------------------
do_start () {
   sm_register $SERVICE_NAME $SERVICE_DEFAULT_HANDLER "$SERVICE_CUSTOM_EVENTS"
}

#-----------------------------------------------------------------------------------
# This script is in the registration directory and will be called automatically at
# system boot. This allows the service to register for events of interest, and to
# set the service status.
#
# It could also be called during running system explicitly
#-----------------------------------------------------------------------------------
case "$1" in
   start|"")
      do_start
      ;;
   restart|reload|force-reload)
      do_start
      ;;
   stop)
      do_stop
      ;;

   *)
      echo "Usage: $SERVICE_NAME [start|stop|restart]" >&2
      exit 3
      ;;
esac
