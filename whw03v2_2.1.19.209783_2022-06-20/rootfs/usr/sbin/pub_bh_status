#!/bin/sh
#
# Copyright (c) 2019, Belkin Inc. All rights reserved.
#
# Publish some backhaul status data to a MQTT topic

PROG_NAME="$(basename $0)"
source /etc/init.d/ulog_functions.sh
source /etc/init.d/sub_pub_funcs.sh

MODE=$(syscfg get smart_mode::mode)
UNCONFIGURED_MODE=0
MASTER_MODE=2
SLAVE_MODE=1
PUB_TOPIC="network/${TOPIC_UUID}/BH/status"
RETRY_TIME="15"
RETRY_FLAG_FILE="/tmp/._retry_pub_bh_status_"


if [ "$MODE" != "$SLAVE_MODE" ];then
	echo "$PROG_NAME: not in slave mode,exit"
	exit
fi

# If auto-channel detection is running then abort publishing backhaul
# status data.  The channel finder running on the Master uses the
# arrival of backhaul status message to indicate that the Slave has
# finished and that the WLAN data has been updated.
# Note that when auto-channel *does* finish it triggers sending WLAN
# and backhaul status.
AC_SRV="autochannel"
AC_QUIET_EV_NAME="${AC_SRV}-quiet"
AC_QUIET_STATE="$(sysevent get $AC_QUIET_EV_NAME)"
if [ "$AC_QUIET_STATE" = '1' ]; then
    printf "%s: Aborting due to active %s operations (%s = \"%s\")\n" \
           "$PROG_NAME" "$AC_SRV" "$AC_QUIET_EV_NAME" "$AC_QUIET_STATE"
    exit 0
fi

PHY_INTF="`sysevent get backhaul::intf`"
INTF=""
TYPE=""
RATE=""
RATE_2=""
CHANNEL=""
AP_BSSID=""
NOISE="0"
RSSI="0"
STA_BSSID=""

# Get backhaul status.  If not up, abort.  We can't send if the
# backhaul is down.
STATE="$(sysevent get backhaul::status)"
if [ "$STATE" != "up" ]; then
    [ $DEBUG ] && echo "$PROG_NAME: Backhaul down, aborting"
    exit 0
fi

if [ "$PHY_INTF" = "ath9" ] || [ "$PHY_INTF" = "ath11" ] || [ "$PHY_INTF" = "ath8" ];then
	TYPE="WIRELESS"
	RATE=`iwlist ${PHY_INTF} bitrate | awk -F':' '/Current Bit Rate/ {print $2}'`
	RATE_2=`iwlist ${PHY_INTF} bitrate -k | awk -F':' '/Current Bit Rate/ {print $2}'`
	CHANNEL=` iwlist $PHY_INTF channel 2>/dev/null | grep 'Current Frequency' | awk -F'Channel' '{print $2}' | sed 's/ //g' | awk -F')' '{print $1}' | egrep "^[0-9]+$" `
	if [ "$CHANNEL" = "" ];then
		CHANNEL=`sysevent get backhaul::preferred_chan`
	fi
	AP_BSSID=`iwconfig $PHY_INTF 2>/dev/null | grep "Access Point:" | awk -F'Access Point:' '{print $2}' | sed 's/ //g' | egrep "^[0-9a-zA-Z:]{17}$"`
	if [ "$AP_BSSID" = "" ];then
		AP_BSSID=`sysevent get backhaul::preferred_bssid`
	fi
	STA_BSSID=`ifconfig $PHY_INTF 2>/dev/null | awk '/HWaddr [0-9a-fA-F:]{17}/ {print $5}'`
	if [ "$CHANNEL" -le "13" ]; then
			INTF="2.4G"
	elif [ "$CHANNEL" -ge "36" -a "$CHANNEL" -lt "65" ]; then
			INTF="5GL"
	else
			INTF="5GH"
	fi

	#NOISE="-95"
	NOISE=`iwconfig $PHY_INTF | grep "Noise level=" | awk -F'Noise level=' '{print $2}' | awk '{print $1}'`
	if [ "$PHY_INTF" = "ath9" ] ; then
		RSSI=` apstats -r -i wifi1 | grep "Rx RSSI" | awk -F'=' '{print $2}' | sed 's/ //g' `
	elif [ "$PHY_INTF" = "ath11" ] ; then
		RSSI=` apstats -r -i wifi2 | grep "Rx RSSI" | awk -F'=' '{print $2}' | sed 's/ //g' `
	else
		RSSI=` apstats -r -i wifi0 | grep "Rx RSSI" | awk -F'=' '{print $2}' | sed 's/ //g' `
	fi
	[ "$RSSI" != "0" ] && let "RSSI=NOISE+RSSI"
	if [ "$RSSI" = "0" ] || [ "$RSSI" -gt "0" ];then
		RSSI=`iwconfig $PHY_INTF | grep "Signal level=" | awk -F'=' '{print $3}' | awk '{print $1}'`
		echo "$RSSI" | egrep "^-[0-9]+" >/dev/null
		if [ $? -ne 0 ];then
			echo "error, wrong RSSI=$RSSI"
		fi
	fi

	echo "$RSSI=$NOISE" | egrep "^-[0-9]+=-[0-9]+$" >/dev/null
	if [ $? -ne 0 ];then
		NOISE="0"
		RSSI="0"
		echo "pub_bh_status: error,failed to get RSSI, int=${PHY_INTF},BSSID=$AP_BSSID,RSSI=$RSSI,NOISE=$NOISE"
		ulog "pub_bh_status: error,failed to get RSSI, int=${PHY_INTF},BSSID=$AP_BSSID,RSSI=$RSSI,NOISE=$NOISE" 
		sleep $RETRY_TIME && pub_bh_status &
		if [ -f $RETRY_FLAG_FILE ];then
			exit
		else
			touch $RETRY_FLAG_FILE
		fi
	else
		if [ -f $RETRY_FLAG_FILE ];then
			rm $RETRY_FLAG_FILE -f
		fi
	fi

elif [ "${PHY_INTF:0:3}" = "eth" ] ;then
	TYPE="WIRED"
	INTF="$PHY_INTF"
	RATE="1 Gb/s"
	RATE_2="1000000 Kb/s"
        MAC="$(syscfg get device::mac_addr)"
fi

if [ $DEBUG ];then
    echo "Options:"
    echo "   BIND_ADDR: $BIND_ADDR"
    echo "   HOST_PORT: $HOST_PORT"
    echo "   HOST_ADDR: $HOST_ADDR"
    echo "   TOPIC    : $PUB_TOPIC"
    echo "   STATE    : $STATE"
fi

[ $DEBUG ] && echo "${PROG_NAME}: publishing backhaul status"

mk_infra_payload \
    -t status \
    -u "$UUID" \
    -s "intf:${INTF}" \
    -s "type:${TYPE}" \
    -s "channel:${CHANNEL}" \
    -s "rssi:${RSSI}" \
    -s "noise:${NOISE}" \
    -s "phyRate:${RATE}" \
    -s "phyRate_2:${RATE_2}" \
    -s "ap_bssid:${AP_BSSID}" \
    -s "sta_bssid:${STA_BSSID}" \
    -s "mac:${MAC}" \
    -s "userAp2G_bssid:`ifconfig ath0 2>/dev/null | grep HWaddr | awk '{print $5}'`" \
    -s "ip:`ifconfig br0 | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}'`" \
    -s "state:$STATE" | \
     publish "$PUB_TOPIC"
