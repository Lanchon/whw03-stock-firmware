#!/bin/sh
#
# smcdb - CommandLine tool to provide easy access to the smartconnect database (server.sql) in Master node.
#
# Version 0.1.0
#

SMART_CONNECT_SERVER_DB="/var/config/smartconnect/server.sql"

OP=""
OP_ADD_DB="add_db"
OP_LIST_DB="list_db"
OP_SEARCH_DB="search_db"
OP_INSERT_DB="insert_db"
OP_UPDATE_DB="update_db"
OP_UPDATEX_DB="updatex_db"
OP_DELETE_DB="delete_db"
OP_CHECK_DB="check_db"

PROGNAME=$(basename $0)

EXITCODE="0"

# Update command can be used as following example.
# smcdb -i -I device_id -M mac_addr
# smcdb -i -I device_id -U UUID
# smcdb -f -F infra(boolean) -M mac_addr
# smcdb -f -F infra(boolean) -U UUID

# Search command can be used as following example.
# smcdb -s -U UUID
# smcdb -s -M mac_addr
# smcdb -s -S serial
# smcdb -s -I device_id

# Delete command can be used as following example.
# smcdb -d -U UUID
# smcdb -d -M mac_addr
# smcdb -d -S serial
# smcdb -d -I device_id

# List all entries command can be used as following example.
# smcdb -l 

# Add command
# smcdb -a "SQLite statement"


usage() {
    cat <<-EOF
	smcdb can be used for the following:
     - Adding the entry to the database
     - Searching the entry from the database by using uuid or macaddr or serial or device_id
     - Inserting a new entry into devices table
     - Updating the device_id from the database by using macaddr or uuid
     - Updating the infra from the database by using macaddr or uuid
     - Deleting the entry from the database by using uuid or macaddr or serial or device_id
     - Listing the all entries from the database
	More info can be found on smcdb's wiki page here:
    http://wiki.nikleb.com:8090/display/PN/smcdb
EOF
    printf "Usage:\n"
    printf "        %s {options}\n" $PROGNAME
    echo "Where {options} are one or more of:"
    printf "  -a {SQL}      Add an entry to the database using sql statement\n"
    printf "  -l:           List all entries from the database\n"
    printf "  -n:           Insert a new entry into devices table (must use with -M option mac address)\n"
    printf "  -u:           Update an entry into devices table (must use with -M option mac address)\n"
    printf "  -i:           Update a device_id from the database (must use with -I option and require only one sub-option)\n"
    printf "  -f:           Update an infra from the database (must use with -F require only one sub-option)\n"
    printf "  -d:           Delete all entries or an entry from the database (require only one sub-option)\n"
    printf "  -r:           Check if smart-connect database is ready. (Exit=0 if so, exit !=0 if not)"
    printf "  -s:           Search all entries or an entry from the database (require only one sub-option)\n"
    printf "  -F {infra}        sub_option : infra\n"
    printf "  -I {device_id}    sub_option : device_id\n"
    printf "  -M {macaddr}      sub-option : macaddr\n"
    printf "  -P {pin}          sub-option : pin\n"
    printf "  -O {model}        sub-option : model\n"
    printf "  -D {desc}         sub-option : description\n"
    printf "  -S {serial}       sub-option : serial\n"
    printf "  -U {UUID}         sub-option : UUID\n"
    printf "  -V {vendor}       sub-option : vendor\n"
    printf "  -h:               This help\n"
}

while getopts ":a:dD:ifhlnF:L:I:M:O:P:rsS:uU:V:" opt;do
    case $opt in
        a) SQL=$OPTARG ; OP=$OP_ADD_DB ;;
        d) OP=$OP_DELETE_DB ;;
        i) OP=$OP_UPDATE_DB ; FIELD="device_id" ;;
        f) OP=$OP_UPDATE_DB ; FIELD="infra" ;;
        h) usage ; exit 0 ;;
        l)
            case "$2" in
                "") OP=$OP_LIST_DB ;;
                *)  echo "Invalid option: '$2'"
                    usage
                    exit 1
                    ;;
            esac ;;
        n) OP=$OP_INSERT_DB ;;
        u) OP=$OP_UPDATEX_DB ;;
        D) ARG_DESC=$OPTARG ; shift "$((OPTIND-1))" ;;
        F) ARG_INFRA=$OPTARG ; shift "$((OPTIND-1))" ;;
        L) ARG_LOGIN=$OPTARG ; shift "$((OPTIND-1))" ;;
        I) ARG_DEVICEID=$OPTARG ; shift "$((OPTIND-1))" ;;
        M) ARG_MACADDR=$OPTARG ; shift "$((OPTIND-1))" ;;
        O) ARG_MODEL=$OPTARG ; shift "$((OPTIND-1))" ;;
        P) ARG_PIN=$OPTARG ; shift "$((OPTIND-1))" ;;
        r) OP=$OP_CHECK_DB ;;
        s) OP=$OP_SEARCH_DB ;;
        S) ARG_SERIAL=$OPTARG ; shift "$((OPTIND-1))" ;;
        U) ARG_UUID=$OPTARG ; shift "$((OPTIND-1))" ;;
        V) ARG_VENDOR=$OPTARG ; shift "$((OPTIND-1))" ;;
        \?)
           echo "Invalid option: -$OPTARG" >&2
           usage
           exit 1
           ;;
        :)
           echo "Option -${OPTARG} needs an argument." >&2
           usage
           exit 1
           ;;
    esac
done
shift "$((OPTIND-1))"


#$1 : database name
#$2 : SQL statement
run_sql_db() {
    DB="$1"
    SQL="$2"
    if [ -n "$DB" -a -n "$SQL" ]; then
        RET=`sqlite3 "$DB" "$SQL"`
        EXITCODE="$?"
        echo "$RET"
    else
        (exit 1)
    fi
}

add_db() {
    if [ -z "$SQL" ]; then
        echo "Error: To add an entry to the db, it requires SQL"
        usage
        exit 1
    fi
    run_sql_db $SMART_CONNECT_SERVER_DB "$SQL"
}

list_db() {
    LIST=$(run_sql_db $SMART_CONNECT_SERVER_DB "SELECT D.id, D.pin, D.uuid, \
    D.mac, D.serial, D.device_id, D.infra, A.srplogin, A.srppassword FROM \
    authorize AS A INNER JOIN devices AS D ON A.devices_id = D.id;")

    echo "ID, PIN, UUID, MACADDR, SERIAL, DEVICE_ID, INFRA, SRPLOGIN, SRPPASSWD"
    for ROW in $LIST; do
        # Parsing data (sqlite3 returns a pipe separated string)
        ID=`echo $ROW | awk '{split($0,a,"|"); print a[1]}'`
        PIN=`echo $ROW | awk '{split($0,a,"|"); print a[2]}'`
        UUID=`echo $ROW | awk '{split($0,a,"|"); print a[3]}'`
        MACADDR=`echo $ROW | awk '{split($0,a,"|"); print a[4]}'`
        SERIAL=`echo $ROW | awk '{split($0,a,"|"); print a[5]}'`
        DEVICEID=`echo $ROW | awk '{split($0,a,"|"); print a[6]}'`
        INFRA=`echo $ROW | awk '{split($0,a,"|"); print a[7]}'`
        SRPLOGIN=`echo $ROW | awk '{split($0,a,"|"); print a[8]}'`
        SRPPASSWD=`echo $ROW | awk '{split($0,a,"|"); print a[9]}'`

        # Printing data
        echo -e $ID","$PIN","$UUID","$MACADDR","$SERIAL","$DEVICEID","$INFRA","$SRPLOGIN","$SRPPASSWD
    done
}

insert_db() {
    SQL="INSERT INTO devices "
    COLUMN="("
    VALUE="VALUES ("
    if [ -n "$ARG_MACADDR" ]; then
            COLUMN=$COLUMN"mac"
            VALUE=$VALUE"'$ARG_MACADDR'"
    else
        echo "Error: Mac address is null"
        usage
        exit 1
    fi

    if [ -n "$ARG_UUID" ]; then
            COLUMN=$COLUMN", uuid"
            VALUE=$VALUE", '$ARG_UUID'"
    fi
    if [ -n "$ARG_SERIAL" ]; then
            COLUMN=$COLUMN", serial"
            VALUE=$VALUE", '$ARG_SERIAL'"
    fi
    if [ -n "$ARG_PIN" ]; then
            COLUMN=$COLUMN", pin"
            VALUE=$VALUE", '$ARG_PIN'"
    fi
    if [ -n "$ARG_MODEL" ]; then
            COLUMN=$COLUMN", model"
            VALUE=$VALUE", '$ARG_MODEL'"
    fi
    if [ -n "$ARG_DESC" ]; then
            COLUMN=$COLUMN", desc"
            VALUE=$VALUE", '$ARG_DESC'"
    fi
    if [ -n "$ARG_VENDOR" ]; then
            COLUMN=$COLUMN", vendor"
            VALUE=$VALUE", '$ARG_VENDOR'"
    fi
    COLUMN=$COLUMN") "
    VALUE=$VALUE")"
    SQL=${SQL}${COLUMN}${VALUE}";"
    run_sql_db $SMART_CONNECT_SERVER_DB "$SQL"
}

# Variant on update operation that works like "-n".
# Useful when only some fields need updating
updatex_db () {
    if [ -z "$ARG_MACADDR" ]; then
        echo "Error: MAC required for update"
        exit 1
    fi
    SQL="UPDATE devices SET "
    local VALUES=""
    local PAIR
    if [ -n "$ARG_UUID" ]; then
        PAIR="uuid='$ARG_UUID'"
        VALUES="${VALUES}${VALUES:+, }${PAIR}"
    fi
    if [ -n "$ARG_SERIAL" ]; then
        PAIR="serial='$ARG_SERIAL'"
        VALUES="${VALUES}${VALUES:+, }${PAIR}"
    fi
    if [ -n "$ARG_PIN" ]; then
        PAIR="pin='$ARG_PIN'"
        VALUES="${VALUES}${VALUES:+, }${PAIR}"
    fi
    if [ -n "$ARG_MODEL" ]; then
        PAIR="model='$ARG_MODEL'"
        VALUES="${VALUES}${VALUES:+, }${PAIR}"
    fi
    if [ -n "$ARG_DESC" ]; then
        PAIR="desc='$ARG_DESC'"
        VALUES="${VALUES}${VALUES:+, }${PAIR}"
    fi
    if [ -n "$ARG_VENDOR" ]; then
        PAIR="vendor='$ARG_VENDOR'"
        VALUES="${VALUES}${VALUES:+, }${PAIR}"
    fi
    if [ -n "$ARG_INFRA" ]; then
        PAIR="infra='$ARG_INFRA'"
        VALUES="${VALUES}${VALUES:+, }${PAIR}"
    fi
    # Would anything be changed?  Give up if not
    if [ -z "$VALUES" ]; then
        echo "Nothing to do"
        exit 0
    fi
    SQL="${SQL}${VALUES} WHERE mac=\"${ARG_MACADDR}\";"
    run_sql_db $SMART_CONNECT_SERVER_DB "$SQL"
}

update_db() {
    if [ "$FIELD" = "device_id" ]; then
            SQL="UPDATE devices SET device_id=$ARG_DEVICEID "
    elif [ "$FIELD" = "infra" ]; then
            SQL="UPDATE devices SET infra=$ARG_INFRA "
    else
        echo "Error: Not support."
        usage
        exit 1
    fi

    if [ -n "$ARG_UUID" ]; then
            SQL=$SQL"WHERE uuid='$ARG_UUID';"
    elif [ -n "$ARG_MACADDR" ]; then
            SQL=$SQL"WHERE mac='$ARG_MACADDR';"
    elif [ -n "$ARG_SERIAL" ]; then
            SQL=$SQL"WHERE serial='$ARG_SERIAL';"
    elif [ -n "$ARG_DEVICEID" ]; then
            SQL=$SQL"WHERE device_id=$ARG_DEVICEID;"
    else
        echo "Error: Not support."
        usage
        exit 1
    fi
    run_sql_db $SMART_CONNECT_SERVER_DB "$SQL"
}

search_db() {
    SQL="SELECT D.id, D.pin, D.uuid, D.mac, D.serial, D.device_id, D.infra, \
    A.srplogin, A.srppassword FROM authorize AS A INNER JOIN \
    devices AS D ON A.devices_id = D.id"
    if [ -n "$ARG_UUID" ]; then
        SQL=$SQL" WHERE D.uuid='$ARG_UUID';"
    elif [ -n "$ARG_MACADDR" ]; then
        SQL=$SQL" WHERE D.mac='$ARG_MACADDR';"
    elif [ -n "$ARG_SERIAL" ]; then
        SQL=$SQL" WHERE D.serial='$ARG_SERIAL';"
    elif [ -n "$ARG_DEVICEID" ]; then
        SQL=$SQL" WHERE D.device_id=$ARG_DEVICEID;"
    else
        SQL=$SQL";"
    fi


    LIST=$(run_sql_db $SMART_CONNECT_SERVER_DB "$SQL")
    echo "ID, PIN, UUID, MACADDR, SERIAL, DEVICE_ID, INFRA, SRPLOGIN, SRPPASSWD"
    for ROW in $LIST; do
        # Parsing data (sqlite3 returns a pipe separated string)
        ID=`echo $ROW | awk '{split($0,a,"|"); print a[1]}'`
        PIN=`echo $ROW | awk '{split($0,a,"|"); print a[2]}'`
        UUID=`echo $ROW | awk '{split($0,a,"|"); print a[3]}'`
        MACADDR=`echo $ROW | awk '{split($0,a,"|"); print a[4]}'`
        SERIAL=`echo $ROW | awk '{split($0,a,"|"); print a[5]}'`
        DEVICEID=`echo $ROW | awk '{split($0,a,"|"); print a[6]}'`
        INFRA=`echo $ROW | awk '{split($0,a,"|"); print a[7]}'`
        SRPLOGIN=`echo $ROW | awk '{split($0,a,"|"); print a[8]}'`
        SRPPASSWD=`echo $ROW | awk '{split($0,a,"|"); print a[9]}'`

        # Printing data
        echo -e $ID","$PIN","$UUID","$MACADDR","$SERIAL","$DEVICEID","$INFRA","$SRPLOGIN","$SRPPASSWD
    done
}

delete_db() {
    SQL="PRAGMA foreign_keys = ON;"
    if [ -n "$ARG_UUID" ]; then
        SQL=$SQL"DELETE FROM devices WHERE uuid='$ARG_UUID';"
    elif [ -n "$ARG_MACADDR" ]; then
        SQL=$SQL"DELETE FROM devices WHERE mac='$ARG_MACADDR';"
    elif [ -n "$ARG_SERIAL" ]; then
        SQL=$SQL"DELETE FROM devices WHERE serial='$ARG_SERIAL';"
    elif [ -n "$ARG_DEVICEID" ]; then
        SQL=$SQL"DELETE FROM devices WHERE device_id=$ARG_DEVICEID;"
    else
        SQL=$SQL"DELETE FROM devices;"
    fi
    run_sql_db $SMART_CONNECT_SERVER_DB "$SQL"
}

check_db () {
    if [ -f "$SMART_CONNECT_SERVER_DB" ]; then
        exit 0
    else
        exit 1
    fi
}

case $OP in
    $OP_ADD_DB)    add_db $SQL ;;
    $OP_LIST_DB)   list_db ;;
    $OP_SEARCH_DB) search_db ;;
    $OP_INSERT_DB) insert_db ;;
    $OP_UPDATE_DB) update_db ;;
    $OP_UPDATEX_DB) updatex_db ;;
    $OP_DELETE_DB) delete_db ;;
    $OP_CHECK_DB)  check_db ;;
    "")
        echo "Nothing to do"
        usage
        exit 0
        ;;
    *)
        echo "Error unknown operation \"$OP\"."
        exit 1
        ;;
esac
exit $EXITCODE
