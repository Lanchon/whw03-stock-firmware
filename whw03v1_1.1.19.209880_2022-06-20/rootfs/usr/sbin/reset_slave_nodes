#!/bin/sh
#
# reset_slave_nodes - Assist with Node onboarding.
#
# Version 0.1.0
#
# by dash

# Default values
USERNAME="admin"
INTERFACE="br0"
SILENT="--silent"
IPADDR="localhost"
FAKEOUT=""
# See if there's an admin password in syscfg & use it if present
PASSWORD="$(syscfg get device::admin_password)"
PASSWORD="${PASSWORD:-admin}"

OP=""
OP_FACTORY_RESET="factory_reset"
OP_FACTORY_RESET_ALL="factory_reset_all"
OP_REBOOT="reboot"
OP_REBOOT_ALL="reboot_all"

FACTORY_RESET_COMMAND="core/FactoryReset"
REBOOT_COMMAND="core/Reboot"

PROGNAME=$(basename $0)

usage() {
    echo "reset_slave_nodes reboot or factory resets 1 or all Nodes."
    printf "Usage:\n"
    printf "        %s {options}\n" $PROGNAME
    echo "Where {options} are one or more of:"
    printf "  -a          Factory reset All slaves\n"
    printf "  -A          Reboot All slaves\n"
    printf "  -b {intf}   Binding interface (default $INTERFACE)\n"
    printf "  -B          Reboot slaves (instead of factory reset)\n"
    printf "  -i {IP}     Reset just one slave at {IP} (required w/o -a)\n"
    printf "  -n          Don't actually reset any Nodes; just test communications\n"
    printf "  -u {user}   User (default $USERNAME)\n"
    printf "  -w {pass}   Password (default $PASSWORD)\n"
    printf "  -h          This help\n"
}

while getopts ":aAb:Bdi:nu:w:h" opt;do
    case $opt in
        a) OP=$OP_FACTORY_RESET_ALL ;;
        A) OP=$OP_REBOOT_ALL ;;
        b) INTERFACE=$OPTARG ;;
        B) OP=$OP_REBOOT ;;
        d) DEBUG=1 ;;
        i) IPADDR=$OPTARG ;;
        n) FAKEOUT="Intentional failure" ;;
        u) USERNAME=$OPTARG ;;
        w) PASSWORD=$OPTARG ;;
        h) usage ; exit 0 ;;
        \?)
           echo "Invalid option: -$OPTARG" >&2
           usage
           exit 1
           ;;
        :)
           echo "Option -${OPTARG} needs an argument." >&2
           usage
           exit 1
           ;;
    esac
done
shift $((OPTIND-1))
[ -n "$IPADDR" -a -z "$OP" ] && OP=$OP_FACTORY_RESET

# Check for valid command & option combos
if [ -z "$IPADDR" -a "$OP" != "$OP_FACTORY_RESET_ALL" ]; then
    echo "Error: IP address (-i) required unless using (-a)"
    usage
    exit 1
fi

if [ -n "$DEBUG" ]; then
    unset SILENT
fi

# $1: COMMAND
# $2: DATA
# $3: HOST
curler() {
    # [ -n "$DEBUG" ] && echo "AUTH_TOKEN: \"${AUTH_TOKEN}\""
    local COMMAND="$1"
    local DATA="{$2}"
    local HOST="$3"
    [ "$DEBUG" ] && >&2 echo "Sending command \"$COMMAND\", payload: \"$DATA\""
    curl $SILENT \
         --insecure \
         --interface ${INTERFACE} \
         --connect-timeout 3 \
         --location "http://${HOST}/JNAP/" \
         -d "$DATA" \
         -H "X-JNAP-ACTION: http://linksys.com/jnap/${COMMAND}" \
         -H "X-JNAP-Authorization: Basic ${AUTH_TOKEN}"
}

#curler $COMMAND
AUTH_TOKEN="$(echo -n "${USERNAME}:${PASSWORD}" | base64)"

# $1: IP address to use
# $2: Command to issue
command () {
    local IP="$1"
    local COMMAND="$2"
    DATA="$FAKEOUT"
    curler $COMMAND "$DATA" "$IP"
}

# Compile a list of slave node IP addresses
get_slave_ip_list() {
    local DEVINFO_DIR="$(syscfg get subscriber::file_prefix)/DEVINFO"
    # The command "list_nodes_farthest_first" provides a topologically
    # ordered Node Slave list.  The ordering is such that is it safe
    # perform disruptive operations without effecting Nodes later in
    # the sequence.
    for UUID in $(list_nodes_farthest_first);do
        local IP="$(jsonparse -f ${DEVINFO_DIR}/${UUID} data.ip)"
        [ -n "$IP" ] && echo $IP
    done
}

# $1: Command to issue
# $2: Description
command_all () {
    local COMMAND="$1"
    local DESC="$2"
    local MODE="$(syscfg get smart_mode::mode)"
    # Only do this on Master
    if [ "$MODE" = "2" ]; then
        LIST="$(get_slave_ip_list)"
        printf "Will issue '%s' to slaves at:" "$DESC"
        echo $LIST
        for IP in $LIST; do
            printf "Doing %s to $IP" "$DESC" "$IP"
            command $IP $COMMAND
        done
        echo "Waiting for communications to finish..."
        wait
        sleep 2
        echo "Done."
    else
        2>&1 echo "Only Master Nodes can do this"
    fi
}

# $1 is IP address to use
factory_reset() {
    echo "Performing factory reset to $IP"
    command $1 $FACTORY_RESET_COMMAND
}

factory_reset_all() {
    command_all $FACTORY_RESET_COMMAND "factory reset"
}

reboot () {
    echo "Rebooting $IP"
    command $1 $REBOOT_COMMAND
}

reboot_all () {
    command_all $REBOOT_COMMAND "reboot"
}



if [ -n "$DEBUG" ]; then
    echo "$PROG_NAME Current values:"
    echo "    USERNAME:  \"$USERNAME\""
    echo "    PASSWORD:  \"$PASSWORD\""
    echo "    AUTH_TOKEN:\"${AUTH_TOKEN}\""
    echo "    INTERFACE: \"$INTERFACE\""
    echo "    IPADDR:    \"$IPADDR\""
    echo "    OP:        \"$OP\""
    echo "    WIRED:     \"$WIRED\""
fi

case $OP in
    $OP_FACTORY_RESET)
        if [ -n "$IPADDR" ]; then
            factory_reset "$IPADDR"
        else
            >& 2 echo "Error: Must provide IP address if not resetting all"
            exit 1
        fi
        ;;
    $OP_FACTORY_RESET_ALL) factory_reset_all ;;
    $OP_REBOOT)
        if [ -n "$IPADDR" ]; then
            reboot "$IPADDR"
        else
            >& 2 echo "Error: Must provide IP address if not rebooting all"
            exit 1
        fi
        ;;
    $OP_REBOOT_ALL) reboot_all ;;
    "")
        echo "Nothing to do"
        usage
        exit 0
        ;;
    *)
        echo "Error unknown operation \"$OP\"."
        exit 1
        ;;
esac
